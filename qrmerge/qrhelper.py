import string


# _rsgroup: see https://github.com/lincolnloop/python-qrcode/blob/master/qrcode/base.py , Lincoln Loop
_rsgroup = [
    [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9]], # 1
    [[1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16]], # 2
    [[1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13]], # 3
    [[1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9]], # 4
    [[1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12]], # 5
    [[2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15]], # 6
    [[2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14]], # 7
    [[2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15]], # 8
    [[2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13]], # 9
    [[2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16]], # 10
    [[4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13]], # 11
    [[2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15]], # 12
    [[4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12]], # 13
    [[3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13]], # 14
    [[5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12, 7, 37, 13]], # 15
    [[5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16]], # 16
    [[1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15]], # 17
    [[5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15]], # 18
    [[3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14]], # 19
    [[3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16]], # 20
    [[4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17]], # 21
    [[2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13]], # 22
    [[4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16]], # 23
    [[6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17]], # 24
    [[8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16]], # 25
    [[10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17]], # 26
    [[8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16]], # 27
    [[3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16]], # 28
    [[7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16]], # 29
    [[5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16]], # 30
    [[13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16]], # 31
    [[17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16]], # 32
    [[17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16]], # 33
    [[13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17]], # 34
    [[12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16]], # 35
    [[6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16]], # 36
    [[17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16]], # 37
    [[4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16]], # 38
    [[20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16]], # 39
    [[19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]], #40
]


def _i2b(x, length):
    b = bin(x)[2:]
    return '0' * (length - len(b)) + b


def mode_and_encode(s):
    alpha_letters = string.digits + string.ascii_uppercase + ' $%*+-./:'
    code = ''
    if all(c in string.digits for c in s):
        mode = 0
        for i in range(0, len(s), 3):
            sub = s[i:i + 3]
            code += _i2b(int(sub), 1 + 3 * len(sub))
    elif all(c in alpha_letters for c in s):
        mode = 1
        for i in range(0, len(s), 2):
            sub = s[i: i + 2]
            if 1 == len(sub):
                code += _i2b(alpha_letters.index(sub), 6)
            else:
                code += _i2b(alpha_letters.index(sub[0]) * 45 + alpha_letters.index(sub[1]), 11)
    else:
        mode = 2
        for c in s:
            code += _i2b(ord(c), 8)
    return mode, code


def indicators(version, mode, length):
    mode_indicator = ['0001', '0010', '0100'][mode]
    cci_len = [[10, 9, 8, 8], [12, 11, 16, 10], [14, 13, 16, 12]][(version >= 10) + (version >= 27)][mode]
    cci = _i2b(length, cci_len)
    return mode_indicator + cci


def minimal_version(mode, level, encode):
    level = 'LMQH'.index(level)
    def fit(version):
        total_bits = len(indicators(version, mode, len(encode))) + len(encode)
        groups6 = _rsgroup[version - 1][level]
        data_cw = groups6[0] * groups6[2]
        if 6 == len(groups6):
            data_cw += groups6[3] * groups6[5]
        return total_bits <= data_cw * 8
    lo, hi = 1, 41
    while lo < hi:
        mid = (lo + hi) // 2
        if fit(mid):
            hi = mid
        else:
            lo = mid + 1
    assert lo <= 40, 'string too long'
    return lo


def group_and_ecc(version, level):
    level = 'LMQH'.index(level)
    groups6 = _rsgroup[version - 1][level]
    ecc_num = groups6[1] - groups6[2]

    if 3 == len(groups6):
        groups = (groups6[0], groups6[2], 0, 0)
    else:
        groups = (groups6[0], groups6[2], groups6[3], groups6[5])
        assert ecc_num == groups6[4] - groups6[5]
    return groups, ecc_num
